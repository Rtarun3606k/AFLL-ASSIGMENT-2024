
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA CREATE EQUALS FROM ID INSERT INT INTO LPAREN NUMBER RPAREN SELECT SEMICOLON STRING TABLE VALUES VARCHAR WHEREstatement : CREATE TABLE ID LPAREN column_definitions RPAREN SEMICOLONcolumn_definitions : column_definitions COMMA column_definition\n                          | column_definitioncolumn_definition : ID type_specifiertype_specifier : INT\n                      | VARCHAR LPAREN NUMBER RPARENstatement : INSERT INTO ID LPAREN id_list RPAREN VALUES LPAREN value_list RPAREN SEMICOLONid_list : id_list COMMA ID\n               | IDvalue_list : value_list COMMA value\n                  | valuevalue : STRING\n             | NUMBERstatement : SELECT id_list FROM ID WHERE ID EQUALS value SEMICOLON'
    
_lr_action_items = {'CREATE':([0,],[2,]),'INSERT':([0,],[3,]),'SELECT':([0,],[4,]),'$end':([1,30,42,45,],[0,-1,-14,-7,]),'TABLE':([2,],[5,]),'INTO':([3,],[6,]),'ID':([4,5,6,11,12,13,14,21,26,],[8,9,10,15,16,17,8,28,17,]),'FROM':([7,8,16,],[11,-9,-8,]),'COMMA':([7,8,16,18,19,20,22,23,31,37,38,39,40,41,46,],[12,-9,-8,26,-3,12,-4,-5,-2,-12,-13,-6,44,-11,-10,]),'RPAREN':([8,16,18,19,20,22,23,31,34,37,38,39,40,41,46,],[-9,-8,25,-3,27,-4,-5,-2,39,-12,-13,-6,43,-11,-10,]),'LPAREN':([9,10,24,32,],[13,14,29,35,]),'WHERE':([15,],[21,]),'INT':([17,],[23,]),'VARCHAR':([17,],[24,]),'SEMICOLON':([25,36,37,38,43,],[30,42,-12,-13,45,]),'VALUES':([27,],[32,]),'EQUALS':([28,],[33,]),'NUMBER':([29,33,35,44,],[34,38,38,38,]),'STRING':([33,35,44,],[37,37,37,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'id_list':([4,14,],[7,20,]),'column_definitions':([13,],[18,]),'column_definition':([13,26,],[19,31,]),'type_specifier':([17,],[22,]),'value':([33,35,44,],[36,41,46,]),'value_list':([35,],[40,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> CREATE TABLE ID LPAREN column_definitions RPAREN SEMICOLON','statement',7,'p_statement_create','parser.py',44),
  ('column_definitions -> column_definitions COMMA column_definition','column_definitions',3,'p_column_definitions','parser.py',48),
  ('column_definitions -> column_definition','column_definitions',1,'p_column_definitions','parser.py',49),
  ('column_definition -> ID type_specifier','column_definition',2,'p_column_definition','parser.py',56),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',60),
  ('type_specifier -> VARCHAR LPAREN NUMBER RPAREN','type_specifier',4,'p_type_specifier','parser.py',61),
  ('statement -> INSERT INTO ID LPAREN id_list RPAREN VALUES LPAREN value_list RPAREN SEMICOLON','statement',11,'p_statement_insert','parser.py',68),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','parser.py',72),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',73),
  ('value_list -> value_list COMMA value','value_list',3,'p_value_list','parser.py',80),
  ('value_list -> value','value_list',1,'p_value_list','parser.py',81),
  ('value -> STRING','value',1,'p_value','parser.py',88),
  ('value -> NUMBER','value',1,'p_value','parser.py',89),
  ('statement -> SELECT id_list FROM ID WHERE ID EQUALS value SEMICOLON','statement',9,'p_statement_select','parser.py',93),
]
